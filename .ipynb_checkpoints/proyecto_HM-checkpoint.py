{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8806ab17",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2ba5b931",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sin_acentos(palabra):\n",
    "    '''\n",
    "    La funcion sin_acentos regresa una palabra sin tildes que anteriormente contenia\n",
    "    tildes. \n",
    "    '''\n",
    "    vocales = {\"á\":\"a\", \"é\":\"e\", \"í\":\"i\", \"ó\":\"o\", \"ú\":\"u\"}\n",
    "    normalizador = str.maketrans(vocales)\n",
    "    return palabra.translate(normalizador)\n",
    "\n",
    "def leer_archivo():\n",
    "    '''\n",
    "    por definir\n",
    "    '''\n",
    "    with open(\"./words.txt\", \"r\", encoding=\"utf-8\") as file:\n",
    "        lista_palabras= [sin_acentos(i.strip().lower()) for i in file]\n",
    "        lista_nivel={'facil': [i for i in lista_palabras if len(i)<6],\n",
    "                     'medio': [i for i in lista_palabras if 9>len(i)>6],\n",
    "                     'dificil': [i for i in lista_palabras if len(i)>9]\n",
    "                    }\n",
    "        return(lista_nivel)        \n",
    "\n",
    "        \n",
    "def selecciona_palabra(n):\n",
    "    '''\n",
    "   Selecciona_palabra es una funcion que tiene como parametro la dificultad de la funcion \n",
    "   inicio, y dependiendo el valor ingresado tomara una palabra aleatoria de una BD y \n",
    "   escondera todas las letras que conforman a esa palabra. \n",
    "    \n",
    "   Las letras se iran descubriendo si el usuario logra teclear aquella que pertenezca\n",
    "   a la palabra, si hay mas de dos letras iguales en la palabra, la funcion lograra\n",
    "   aparecer todas sin necesidad de introducir un nuevo registro.\n",
    "    \n",
    "   Caso contrario, si el usuario no logra introducir una letra que pertenezca, las opor-\n",
    "   tunidades que tiene iran disminuyendo hasta que pierda el juego. \n",
    "    \n",
    "    '''\n",
    "    lectura= leer_archivo()\n",
    "    \n",
    "    if n==1:\n",
    "        palabra= random.choice(lectura['facil'])\n",
    "        descubierto=[' ? ' for i in palabra ]\n",
    "        \n",
    "    if n==2:\n",
    "        palabra= random.choice(lectura['medio'])\n",
    "        descubierto=[' ? ' for i in palabra ]\n",
    "             \n",
    "    if n==3:\n",
    "        palabra= random.choice(lectura['dificil'])\n",
    "        descubierto=[' ? ' for i in palabra ]\n",
    "        \n",
    "        \n",
    "    flg=0    \n",
    "    oportunidades= 10\n",
    "    while oportunidades > 0:\n",
    "        print(descubierto, \"---\", len(palabra), \"letras,\", oportunidades, 'vidas\\n')\n",
    "        letra = input(\"Adivina la palabra, ingrese un caracter válido: \")    \n",
    "        if letra.isalpha() and len(letra) == 1:\n",
    "            for index in range(len(palabra)):\n",
    "                if letra == palabra[index]:\n",
    "                    descubierto[index]=letra\n",
    "                    flg=flg+1\n",
    "                    if flg==len(palabra):\n",
    "                        return ('la palabra es:', palabra, 'Ganaste!')\n",
    "            if letter not in palabra:\n",
    "                oportunidades-=1\n",
    "                print ('La letra',letter,'no pertenece a la palabra. Aun tienes', oportunidades, 'oportunidades más')\n",
    "        else:\n",
    "            print(\"Opcion no valida: has ingresado un caracter no valido, intenta de nuevo\")\n",
    "    else:\n",
    "        return('perdiste')\n",
    "\n",
    "Intrucciones= \"\"\"\n",
    "Instrucciones: seleccione un nivel para jugar.\n",
    "1. Fácil (4 - 6 letras)\n",
    "2. Medio (7 - 9 letras)\n",
    "3. Dificil (10+ letras)\n",
    "              \"\"\"    \n",
    "def inicio():\n",
    "    '''\n",
    "    por definir\n",
    "    \n",
    "    '''\n",
    "    \n",
    "    \n",
    "    logo = \"\"\"\n",
    "██╗░░██╗░█████╗░███╗░░██╗░██████╗░███╗░░░███╗░█████╗░███╗░░██╗\n",
    "██║░░██║██╔══██╗████╗░██║██╔════╝░████╗░████║██╔══██╗████╗░██║\n",
    "███████║███████║██╔██╗██║██║░░██╗░██╔████╔██║███████║██╔██╗██║\n",
    "██╔══██║██╔══██║██║╚████║██║░░╚██╗██║╚██╔╝██║██╔══██║██║╚████║\n",
    "██║░░██║██║░░██║██║░╚███║╚██████╔╝██║░╚═╝░██║██║░░██║██║░╚███║\n",
    "╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░╚══╝░╚═════╝░╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░╚══╝\n",
    "\"\"\"\n",
    "    print(logo)\n",
    "    print(Intrucciones)\n",
    "    nivel= int(input(\"\\n\\nEscoge tu nivel\"))\n",
    "    while nivel==1 or nivel==2 or nivel==3:\n",
    "            return selecciona_palabra(nivel)\n",
    "    else:\n",
    "        print('el valor ingresado no es correcto. Intenta de nuevo')\n",
    "        return inicio()\n",
    "           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2e9eaeb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "██╗░░██╗░█████╗░███╗░░██╗░██████╗░███╗░░░███╗░█████╗░███╗░░██╗\n",
      "██║░░██║██╔══██╗████╗░██║██╔════╝░████╗░████║██╔══██╗████╗░██║\n",
      "███████║███████║██╔██╗██║██║░░██╗░██╔████╔██║███████║██╔██╗██║\n",
      "██╔══██║██╔══██║██║╚████║██║░░╚██╗██║╚██╔╝██║██╔══██║██║╚████║\n",
      "██║░░██║██║░░██║██║░╚███║╚██████╔╝██║░╚═╝░██║██║░░██║██║░╚███║\n",
      "╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░╚══╝░╚═════╝░╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░╚══╝\n",
      "\n",
      "\n",
      "Instrucciones: seleccione un nivel para jugar.\n",
      "1. Fácil (4 - 6 letras)\n",
      "2. Medio (7 - 9 letras)\n",
      "3. Dificil (10+ letras)\n",
      "              \n"
     ]
    }
   ],
   "source": [
    "inicio()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d8dffcb6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a8fde794",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a9dd2c3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19c4f65e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
